apply plugin: "com.android.application"  // Added missing plugin
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
  entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
  reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
  hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
  codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()

  // Use Expo CLI to bundle the app, this ensures the Metro config
  // works correctly with Expo projects.
  cliFile = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
  bundleCommand = "export:embed"

  /* Folders */
  //  The root of your project, i.e. where "package.json" lives. Default is '..'
  //  root = file("../")
  //  The folder where the react-native NPM package is. Default is ../node_modules/react-native
  //  reactNativeDir = file("../node_modules/react-native")
  //  The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
  //  codegenDir = file("../node_modules/@react-native/codegen")

  /* Variants */
  //  The list of variants to that are debuggable. For those we're going to
  //  skip the bundling of the JS bundle and the assets. By default is just 'debug'.
  //  If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
  //  debuggableVariants = ["liteDebug", "prodDebug"]

  /* Bundling */
  //  A list containing the node command and its flags. Default is just 'node'.
  //  nodeExecutableAndArgs = ["node"]

  //
  //  The path to the CLI configuration file. Default is empty.
  //  bundleConfig = file(../rn-cli.config.js)
  //
  //  The name of the generated asset file containing your JS bundle
  //  bundleAssetName = "MyApplication.android.bundle"
  //
  //  The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
  //  entryFile = file("../js/MyApplication.android.js")
  //
  //  A list of extra flags to pass to the 'bundle' commands.
  //  See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
  //  extraPackagerArgs = []

  /* Hermes Commands */
  //  The hermes compiler command to run. By default it is 'hermesc'
  //  hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
  //
  //  The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
  //  hermesFlags = ["-O", "-output-source-map"]
}

android 
  ndkVersion rootProject.ext.ndkVersion

  buildToolsVersion rootProject.ext.buildToolsVersion
  compileSdk rootProject.ext.compileSdkVersion

  namespace "com.cliente"
